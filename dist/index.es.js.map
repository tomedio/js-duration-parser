{"version":3,"file":"index.es.js","sources":["../src/TimeConverter.ts","../src/TimeIdentifiers.ts","../src/TimeGroups.ts","../src/DurationParser.ts","../src/DurationTranslator.ts","../src/DurationValidator.ts"],"sourcesContent":["/**\n * Allow time conversion between units\n */\nclass TimeConverter {\n  #conversionMatrix = {\n    's=>s': 1,\n    'm=>s': 60,\n    'h=>s': 60 * 60,\n    'd=>s': 24 * 60 * 60,\n    'w=>s': 7 * 24 * 60 * 60,\n    's=>m': 1 / 60,\n    'm=>m': 1,\n    'h=>m': 60,\n    'd=>m': 24 * 60,\n    'w=>m': 7 * 24 * 60,\n    's=>h': 1 / 60 / 60,\n    'm=>h': 1 / 60,\n    'h=>h': 1,\n    'd=>h': 24,\n    'w=>h': 7 * 24,\n    's=>d': 1 / 24 / 60 / 60,\n    'm=>d': 1 / 24 / 60,\n    'h=>d': 1 / 24,\n    'd=>d': 1,\n    'w=>d': 7,\n    's=>w': 1 / 7 / 24 / 60 / 60,\n    'm=>w': 1 / 7 / 24 / 60,\n    'h=>w': 1 / 7 / 24,\n    'd=>w': 1 / 7,\n    'w=>w': 1,\n  };\n\n  /**\n   * Convert time number expressed in source unit to number expressed in target unit; both units are basic one (en)\n   *\n   * @param {number} time Input time number\n   * @param {string} sourceUnit Source time unit\n   * @param {string} targetUnit Target time unit\n   * @returns {number}\n   */\n  convert(time: number, sourceUnit: string, targetUnit: string): number {\n    const conversion = `${sourceUnit}=>${targetUnit}`;\n    const factor = this.#conversionMatrix[conversion] ?? null;\n    if (factor === null) {\n      throw new Error(`Conversion ${conversion} is not supported!`);\n    }\n    return time * factor;\n  }\n}\n\nexport default TimeConverter;","import {TimeIdentifiersGroup} from \"./TimeIdentifiers.types\";\n\n/**\n * Manage time identifiers used in duration string. This class allows to use time identifiers from many languages.\n */\nclass TimeIdentifiers {\n  #identifiers = {\n    en: {\n      s: 's',\n      m: 'm',\n      h: 'h',\n      d: 'd',\n      w: 'w',\n    },\n  };\n\n  /**\n   * Register new time identifiers for the given locale\n   *\n   * @param {string} locale Name of locale for which time identifiers are registered\n   * @param newIdentifiers New time identifiers\n   * @returns {TimeIdentifiers}\n   */\n  add(locale: string, newIdentifiers): TimeIdentifiers {\n    this.#identifiers[locale] = newIdentifiers;\n    return this;\n  }\n\n  /**\n   * Return time identifiers for the given locale name; if not registered, return identifiers for 'en' locale\n   *\n   * @param {string} locale Locale name\n   * @returns {TimeIdentifiersGroup}\n   */\n  get(locale: string): TimeIdentifiersGroup {\n    return this.#identifiers[locale] ?? this.#identifiers.en;\n  }\n\n  /**\n   * Return internal unit (en) for the time unit in the specified locale\n   *\n   * @param {string} identifier Localized time identifier\n   * @param {string} locale Locale name\n   * @returns {string|null}\n   */\n  getInternalUnit(identifier: string, locale: string): string | null {\n    const usedIdentifiers = this.get(locale);\n    for (const originalIdentifier in usedIdentifiers) {\n      if (usedIdentifiers[originalIdentifier] === identifier) {\n        return originalIdentifier;\n      }\n    }\n    return null;\n  }\n}\n\nexport default TimeIdentifiers;","import TimeIdentifiers from \"./TimeIdentifiers\";\nimport {TimeGroup} from \"./TimeGroups.types\";\n\n/**\n * Manage time groups and make some operations on them.\n */\nclass TimeGroups {\n  #timeIdentifiers;\n\n  /* istanbul ignore next */\n  /**\n   * @param {TimeIdentifiers|null} timeIdentifiers\n   */\n  constructor(timeIdentifiers: TimeIdentifiers|null = null) {\n    this.#timeIdentifiers = timeIdentifiers ?? new TimeIdentifiers();\n  }\n\n  /**\n   * Extract array of time groups which are in duration string\n   *\n   * @param {string} duration Whole duration string\n   * @param {string} locale Locale name of time identifiers used in duration string\n   * @returns {string[]}\n   */\n  extractTimeGroups(duration: string, locale: string): string[] {\n    const usedIdentifiers = this.#timeIdentifiers.get(locale);\n    const stringRegex = `^(\\\\d+${usedIdentifiers.w})?\\\\s*(\\\\d+${usedIdentifiers.d})?\\\\s*(\\\\d+${usedIdentifiers.h})?\\\\s*(\\\\d+${usedIdentifiers.m})?\\\\s*(\\\\d+${usedIdentifiers.s})?$`;\n    const regex = new RegExp(stringRegex);\n    const result = duration.trim().toLowerCase().match(regex);\n    if (result === null) {\n      return [];\n    }\n    return [...result].slice(1).filter(Boolean);\n  }\n\n  /**\n   * Parse single time group to object having information about both unit and number of it\n   *\n   * @param {string} timeGroup Single time group\n   * @param {string} locale Locale name of time unit used in time group\n   * @returns {TimeGroup|null}\n   */\n  parseTimeGroup(timeGroup: string, locale: string): TimeGroup|null {\n    const usedIdentifiers = this.#timeIdentifiers.get(locale);\n    const stringRegex = `^(\\\\d+)\\\\s*([${usedIdentifiers.w}${usedIdentifiers.d}${usedIdentifiers.h}${usedIdentifiers.m}${usedIdentifiers.s}])$`;\n    const regex = new RegExp(stringRegex);\n    const result = timeGroup.trim().toLowerCase().match(regex);\n    if (result === null) {\n      return null;\n    }\n    const timeParts = [...result].slice(1);\n    return {\n      time: parseInt(timeParts[0]),\n      unit: timeParts[1]\n    };\n  }\n\n  /**\n   * Build a single time group from object created while parsing a group\n   *\n   * @param {TimeGroup} parsedTime Object of parsed time group\n   * @returns {string}\n   */\n  buildTimeGroup(parsedTime: TimeGroup): string {\n    if (typeof parsedTime.time === 'undefined' || typeof parsedTime.unit === 'undefined') {\n      throw new Error('Wrong input object is passed');\n    }\n    return `${parsedTime.time}${parsedTime.unit.trim()}`\n  }\n\n  /**\n   * Compose the whole duration string from array of time groups; given separator is used to join all groups\n   *\n   * @param {string[]} timeGroups Array of time groups in the same locale as for output\n   * @param {string} groupSeparator Separator between every group in output duration string\n   * @returns {string}\n   */\n  composeDuration(timeGroups: string[], groupSeparator: string = ' '): string {\n    return timeGroups.join(groupSeparator);\n  }\n}\n\nexport default TimeGroups;","import TimeConverter from \"./TimeConverter\";\nimport TimeIdentifiers from \"./TimeIdentifiers\";\nimport TimeGroups from \"./TimeGroups\";\n\nclass DurationParser {\n  #locale;\n\n  #timeConverter;\n\n  #timeIdentifiers;\n\n  #timeGroups;\n\n  /**\n   * @param {string} locale Locale used for parsing duration\n   * @param {TimeIdentifiers|null} customTimeIdentifiers Custom TimeIdentifiers object with added localized identifiers\n   */\n  constructor(locale: string = 'en', customTimeIdentifiers: TimeIdentifiers|null = null) {\n    this.#locale = locale;\n    this.#timeConverter = new TimeConverter();\n    this.#timeIdentifiers = customTimeIdentifiers ?? new TimeIdentifiers();\n    this.#timeGroups = new TimeGroups(this.#timeIdentifiers);\n  }\n\n  /**\n   * Converts given time group into number in target unit\n   *\n   * @param {string} timeGroup Time group being a single parsed duration, eg. \"2w\", \"30m\", etc.\n   * @param {string} targetUnit Target time unit expressed in 'en' locale\n   * @returns {number}\n   */\n  #convertTimeGroup(timeGroup: string, targetUnit: string): number {\n    const parsedGroup = this.#timeGroups.parseTimeGroup(timeGroup, this.#locale);\n    return this.#timeConverter.convert(\n      parsedGroup.time,\n      this.#timeIdentifiers.getInternalUnit(parsedGroup.unit, this.#locale),\n      targetUnit\n    );\n  }\n\n  /**\n   * Return duration length from input expressed in target units\n   *\n   * @param {string} input Input duration string expressed in human-like pattern\n   * @param {string} targetUnit Identifier of target time unit\n   * @returns {number|null}\n   */\n  parse(input: string, targetUnit: string = 'm'): number|null {\n    if (!input) {\n      return 0;\n    }\n    if (input.trim().match(/^\\d+$/) !== null) {\n      return parseInt(input.trim())\n    }\n    const timeGroups = this.#timeGroups.extractTimeGroups(input, this.#locale);\n    if (timeGroups.length === 0) {\n      return null;\n    }\n    return timeGroups.reduce(\n      (totalTime, currentTimeGroup) =>\n        totalTime + this.#convertTimeGroup(currentTimeGroup, targetUnit),\n      0,\n    );\n  }\n\n  /**\n   * Create duration string from time amount\n   *\n   * @param {number} time Input time amount expressed in source time unit\n   * @param {string} sourceUnit Source time unit identifier\n   * @param {string} groupSeparator Group separator used to join time groups in output duration string\n   * @returns {string}\n   */\n  compose(time: number, sourceUnit: string = 'm', groupSeparator: string = ' '): string {\n    if (!time) {\n      return `0${sourceUnit}`;\n    }\n    const usedIdentifiers = this.#timeIdentifiers.get(this.#locale);\n    const orderedInternalUnits = ['w', 'd', 'h', 'm', 's'];\n\n    const timeGroups = [];\n    let remainingTime = time;\n    // eslint-disable-next-line no-restricted-syntax,guard-for-in\n    for (const currentInternalUnit of orderedInternalUnits) {\n      const convertedTime = parseInt(\n        this.#timeConverter.convert(remainingTime, sourceUnit, currentInternalUnit),\n      );\n      const timeUnit = usedIdentifiers[currentInternalUnit] ?? null;\n      if (convertedTime >= 1.0 && timeUnit !== null) {\n        timeGroups.push(this.#timeGroups.buildTimeGroup({time: convertedTime, unit: timeUnit}));\n        const timeToDiff = this.#timeConverter.convert(\n          convertedTime,\n          currentInternalUnit,\n          sourceUnit,\n        );\n        remainingTime -= timeToDiff;\n      }\n    }\n\n    return this.#timeGroups.composeDuration(timeGroups, groupSeparator);\n  }\n}\n\nexport default DurationParser;","import DurationParser from \"./DurationParser\";\nimport TimeIdentifiers from \"./TimeIdentifiers\";\n\nclass DurationTranslator {\n  #timeIdentifiers;\n\n  /* istanbul ignore next */\n  /**\n   * @param {TimeIdentifiers} timeIdentifiers\n   */\n  constructor(timeIdentifiers: TimeIdentifiers = new TimeIdentifiers()) {\n    this.#timeIdentifiers = timeIdentifiers;\n  }\n\n  /**\n   * Translate duration string from source to target locale\n   *\n   * @param {string} duration Input duration string\n   * @param {string} sourceLocale Source locale name\n   * @param {string} targetLocale Target locale name\n   * @returns {string}\n   */\n  translate(duration: string, sourceLocale: string, targetLocale: string): string {\n    const sourceDurationParser = new DurationParser(sourceLocale, this.#timeIdentifiers);\n    const targetDurationParser = new DurationParser(targetLocale, this.#timeIdentifiers);\n    const parsedSource = sourceDurationParser.parse(duration, 's');\n    return targetDurationParser.compose(parsedSource, 's');\n  }\n}\n\nexport default DurationTranslator;","import TimeGroups from \"./TimeGroups\";\nimport TimeIdentifiers from \"./TimeIdentifiers\";\n\n/**\n * Validate duration string without doing a conversion\n */\nclass DurationValidator {\n  #timeGroups;\n\n  /**\n   * @param {TimeIdentifiers|null} timeIdentifiers\n   */\n  constructor(timeIdentifiers: TimeIdentifiers|null = null) {\n    this.#timeGroups = new TimeGroups(timeIdentifiers ?? new TimeIdentifiers());\n  }\n\n  /**\n   *  Validate if duration string meets all syntactic requirements\n   *\n   * @param {string} duration Duration string expressed in human-like format\n   * @param {string} locale Locale name which is used in duration string\n   * @returns {boolean}\n   */\n  validate(duration: string, locale: string = 'en'): boolean {\n    return Boolean(\n        duration.length > 0 && (duration.trim().match(/^\\d+$/) !== null || this.#timeGroups.extractTimeGroups(duration, locale).length)\n    );\n  }\n}\n\nexport default DurationValidator;"],"names":["_conversionMatrix","TimeConverter","__privateAdd","time","sourceUnit","targetUnit","conversion","factor","__privateGet","_identifiers","TimeIdentifiers","locale","newIdentifiers","identifier","usedIdentifiers","originalIdentifier","_timeIdentifiers","TimeGroups","timeIdentifiers","__privateSet","duration","stringRegex","regex","result","timeGroup","timeParts","parsedTime","timeGroups","groupSeparator","_locale","_timeConverter","_timeGroups","_convertTimeGroup","convertTimeGroup_fn","DurationParser","customTimeIdentifiers","input","totalTime","currentTimeGroup","__privateMethod","orderedInternalUnits","remainingTime","currentInternalUnit","convertedTime","timeUnit","timeToDiff","parsedGroup","DurationTranslator","sourceLocale","targetLocale","sourceDurationParser","targetDurationParser","parsedSource","DurationValidator"],"mappings":"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"}