{"version":3,"file":"index.cjs.js","sources":["../src/TimeConverter.ts","../src/TimeIdentifiers.ts","../src/TimeGroups.ts","../src/DurationParser.ts","../src/DurationTranslator.ts","../src/DurationValidator.ts"],"sourcesContent":["/**\n * Allow time conversion between units\n */\nclass TimeConverter {\n  #conversionMatrix = {\n    's=>s': 1,\n    'm=>s': 60,\n    'h=>s': 60 * 60,\n    'd=>s': 24 * 60 * 60,\n    'w=>s': 7 * 24 * 60 * 60,\n    's=>m': 1 / 60,\n    'm=>m': 1,\n    'h=>m': 60,\n    'd=>m': 24 * 60,\n    'w=>m': 7 * 24 * 60,\n    's=>h': 1 / 60 / 60,\n    'm=>h': 1 / 60,\n    'h=>h': 1,\n    'd=>h': 24,\n    'w=>h': 7 * 24,\n    's=>d': 1 / 24 / 60 / 60,\n    'm=>d': 1 / 24 / 60,\n    'h=>d': 1 / 24,\n    'd=>d': 1,\n    'w=>d': 7,\n    's=>w': 1 / 7 / 24 / 60 / 60,\n    'm=>w': 1 / 7 / 24 / 60,\n    'h=>w': 1 / 7 / 24,\n    'd=>w': 1 / 7,\n    'w=>w': 1,\n  };\n\n  /**\n   * Convert time number expressed in source unit to number expressed in target unit; both units are basic one (en)\n   *\n   * @param {number} time Input time number\n   * @param {string} sourceUnit Source time unit\n   * @param {string} targetUnit Target time unit\n   * @returns {number}\n   */\n  convert(time: number, sourceUnit: string, targetUnit: string): number {\n    const conversion = `${sourceUnit}=>${targetUnit}`;\n    const factor = this.#conversionMatrix[conversion] ?? null;\n    if (factor === null) {\n      throw new Error(`Conversion ${conversion} is not supported!`);\n    }\n    return time * factor;\n  }\n}\n\nexport default TimeConverter;","import {TimeIdentifiersGroup} from \"./TimeIdentifiers.types\";\n\n/**\n * Manage time identifiers used in duration string. This class allows to use time identifiers from many languages.\n */\nclass TimeIdentifiers {\n  #identifiers = {\n    en: {\n      s: 's',\n      m: 'm',\n      h: 'h',\n      d: 'd',\n      w: 'w',\n    },\n  };\n\n  /**\n   * Register new time identifiers for the given locale\n   *\n   * @param {string} locale Name of locale for which time identifiers are registered\n   * @param newIdentifiers New time identifiers\n   * @returns {TimeIdentifiers}\n   */\n  add(locale: string, newIdentifiers): TimeIdentifiers {\n    this.#identifiers[locale] = newIdentifiers;\n    return this;\n  }\n\n  /**\n   * Return time identifiers for the given locale name; if not registered, return identifiers for 'en' locale\n   *\n   * @param {string} locale Locale name\n   * @returns {TimeIdentifiersGroup}\n   */\n  get(locale: string): TimeIdentifiersGroup {\n    return this.#identifiers[locale] ?? this.#identifiers.en;\n  }\n\n  /**\n   * Return internal unit (en) for the time unit in the specified locale\n   *\n   * @param {string} identifier Localized time identifier\n   * @param {string} locale Locale name\n   * @returns {string|null}\n   */\n  getInternalUnit(identifier: string, locale: string): string | null {\n    const usedIdentifiers = this.get(locale);\n    for (const originalIdentifier in usedIdentifiers) {\n      if (usedIdentifiers[originalIdentifier] === identifier) {\n        return originalIdentifier;\n      }\n    }\n    return null;\n  }\n}\n\nexport default TimeIdentifiers;","import TimeIdentifiers from \"./TimeIdentifiers\";\nimport {TimeGroup} from \"./TimeGroups.types\";\n\n/**\n * Manage time groups and make some operations on them.\n */\nclass TimeGroups {\n  #timeIdentifiers;\n\n  /* istanbul ignore next */\n  /**\n   * @param {TimeIdentifiers|null} timeIdentifiers\n   */\n  constructor(timeIdentifiers: TimeIdentifiers|null = null) {\n    this.#timeIdentifiers = timeIdentifiers ?? new TimeIdentifiers();\n  }\n\n  /**\n   * Extract array of time groups which are in duration string\n   *\n   * @param {string} duration Whole duration string\n   * @param {string} locale Locale name of time identifiers used in duration string\n   * @returns {string[]}\n   */\n  extractTimeGroups(duration: string, locale: string): string[] {\n    const usedIdentifiers = this.#timeIdentifiers.get(locale);\n    const stringRegex = `^(\\\\d+${usedIdentifiers.w})?\\\\s*(\\\\d+${usedIdentifiers.d})?\\\\s*(\\\\d+${usedIdentifiers.h})?\\\\s*(\\\\d+${usedIdentifiers.m})?\\\\s*(\\\\d+${usedIdentifiers.s})?$`;\n    const regex = new RegExp(stringRegex);\n    const result = duration.trim().toLowerCase().match(regex);\n    if (result === null) {\n      return [];\n    }\n    return [...result].slice(1).filter(Boolean);\n  }\n\n  /**\n   * Parse single time group to object having information about both unit and number of it\n   *\n   * @param {string} timeGroup Single time group\n   * @param {string} locale Locale name of time unit used in time group\n   * @returns {TimeGroup|null}\n   */\n  parseTimeGroup(timeGroup: string, locale: string): TimeGroup|null {\n    const usedIdentifiers = this.#timeIdentifiers.get(locale);\n    const stringRegex = `^(\\\\d+)\\\\s*([${usedIdentifiers.w}${usedIdentifiers.d}${usedIdentifiers.h}${usedIdentifiers.m}${usedIdentifiers.s}])$`;\n    const regex = new RegExp(stringRegex);\n    const result = timeGroup.trim().toLowerCase().match(regex);\n    if (result === null) {\n      return null;\n    }\n    const timeParts = [...result].slice(1);\n    return {\n      time: parseInt(timeParts[0]),\n      unit: timeParts[1]\n    };\n  }\n\n  /**\n   * Build a single time group from object created while parsing a group\n   *\n   * @param {TimeGroup} parsedTime Object of parsed time group\n   * @returns {string}\n   */\n  buildTimeGroup(parsedTime: TimeGroup): string {\n    if (typeof parsedTime.time === 'undefined' || typeof parsedTime.unit === 'undefined') {\n      throw new Error('Wrong input object is passed');\n    }\n    return `${parsedTime.time}${parsedTime.unit.trim()}`\n  }\n\n  /**\n   * Compose the whole duration string from array of time groups; given separator is used to join all groups\n   *\n   * @param {string[]} timeGroups Array of time groups in the same locale as for output\n   * @param {string} groupSeparator Separator between every group in output duration string\n   * @returns {string}\n   */\n  composeDuration(timeGroups: string[], groupSeparator: string = ' '): string {\n    return timeGroups.join(groupSeparator);\n  }\n}\n\nexport default TimeGroups;","import TimeConverter from \"./TimeConverter\";\nimport TimeIdentifiers from \"./TimeIdentifiers\";\nimport TimeGroups from \"./TimeGroups\";\n\nclass DurationParser {\n  #locale;\n\n  #timeConverter;\n\n  #timeIdentifiers;\n\n  #timeGroups;\n\n  /**\n   * @param {string} locale Locale used for parsing duration\n   * @param {TimeIdentifiers|null} customTimeIdentifiers Custom TimeIdentifiers object with added localized identifiers\n   */\n  constructor(locale: string = 'en', customTimeIdentifiers: TimeIdentifiers|null = null) {\n    this.#locale = locale;\n    this.#timeConverter = new TimeConverter();\n    this.#timeIdentifiers = customTimeIdentifiers ?? new TimeIdentifiers();\n    this.#timeGroups = new TimeGroups(this.#timeIdentifiers);\n  }\n\n  /**\n   * Converts given time group into number in target unit\n   *\n   * @param {string} timeGroup Time group being a single parsed duration, eg. \"2w\", \"30m\", etc.\n   * @param {string} targetUnit Target time unit expressed in 'en' locale\n   * @returns {number}\n   */\n  #convertTimeGroup(timeGroup: string, targetUnit: string): number {\n    const parsedGroup = this.#timeGroups.parseTimeGroup(timeGroup, this.#locale);\n    return this.#timeConverter.convert(\n      parsedGroup.time,\n      this.#timeIdentifiers.getInternalUnit(parsedGroup.unit, this.#locale),\n      targetUnit\n    );\n  }\n\n  /**\n   * Return duration length from input expressed in target units\n   *\n   * @param {string} input Input duration string expressed in human-like pattern\n   * @param {string} targetUnit Identifier of target time unit\n   * @returns {number|null}\n   */\n  parse(input: string, targetUnit: string = 'm'): number|null {\n    if (!input) {\n      return 0;\n    }\n    if (input.trim().match(/^\\d+$/) !== null) {\n      return parseInt(input.trim())\n    }\n    const timeGroups = this.#timeGroups.extractTimeGroups(input, this.#locale);\n    if (timeGroups.length === 0) {\n      return null;\n    }\n    return timeGroups.reduce(\n      (totalTime, currentTimeGroup) =>\n        totalTime + this.#convertTimeGroup(currentTimeGroup, targetUnit),\n      0,\n    );\n  }\n\n  /**\n   * Create duration string from time amount\n   *\n   * @param {number} time Input time amount expressed in source time unit\n   * @param {string} sourceUnit Source time unit identifier\n   * @param {string} groupSeparator Group separator used to join time groups in output duration string\n   * @returns {string}\n   */\n  compose(time: number, sourceUnit: string = 'm', groupSeparator: string = ' '): string {\n    if (!time) {\n      return `0${sourceUnit}`;\n    }\n    const usedIdentifiers = this.#timeIdentifiers.get(this.#locale);\n    const orderedInternalUnits = ['w', 'd', 'h', 'm', 's'];\n\n    const timeGroups = [];\n    let remainingTime = time;\n    // eslint-disable-next-line no-restricted-syntax,guard-for-in\n    for (const currentInternalUnit of orderedInternalUnits) {\n      const convertedTime = parseInt(\n        this.#timeConverter.convert(remainingTime, sourceUnit, currentInternalUnit),\n      );\n      const timeUnit = usedIdentifiers[currentInternalUnit] ?? null;\n      if (convertedTime >= 1.0 && timeUnit !== null) {\n        timeGroups.push(this.#timeGroups.buildTimeGroup({time: convertedTime, unit: timeUnit}));\n        const timeToDiff = this.#timeConverter.convert(\n          convertedTime,\n          currentInternalUnit,\n          sourceUnit,\n        );\n        remainingTime -= timeToDiff;\n      }\n    }\n\n    return this.#timeGroups.composeDuration(timeGroups, groupSeparator);\n  }\n}\n\nexport default DurationParser;","import DurationParser from \"./DurationParser\";\nimport TimeIdentifiers from \"./TimeIdentifiers\";\n\nclass DurationTranslator {\n  #timeIdentifiers;\n\n  /* istanbul ignore next */\n  /**\n   * @param {TimeIdentifiers} timeIdentifiers\n   */\n  constructor(timeIdentifiers: TimeIdentifiers = new TimeIdentifiers()) {\n    this.#timeIdentifiers = timeIdentifiers;\n  }\n\n  /**\n   * Translate duration string from source to target locale\n   *\n   * @param {string} duration Input duration string\n   * @param {string} sourceLocale Source locale name\n   * @param {string} targetLocale Target locale name\n   * @returns {string}\n   */\n  translate(duration: string, sourceLocale: string, targetLocale: string): string {\n    const sourceDurationParser = new DurationParser(sourceLocale, this.#timeIdentifiers);\n    const targetDurationParser = new DurationParser(targetLocale, this.#timeIdentifiers);\n    const parsedSource = sourceDurationParser.parse(duration, 's');\n    return targetDurationParser.compose(parsedSource, 's');\n  }\n}\n\nexport default DurationTranslator;","import TimeGroups from \"./TimeGroups\";\nimport TimeIdentifiers from \"./TimeIdentifiers\";\n\n/**\n * Validate duration string without doing a conversion\n */\nclass DurationValidator {\n  #timeGroups;\n\n  /**\n   * @param {TimeIdentifiers|null} timeIdentifiers\n   */\n  constructor(timeIdentifiers: TimeIdentifiers|null = null) {\n    this.#timeGroups = new TimeGroups(timeIdentifiers ?? new TimeIdentifiers());\n  }\n\n  /**\n   *  Validate if duration string meets all syntactic requirements\n   *\n   * @param {string} duration Duration string expressed in human-like format\n   * @param {string} locale Locale name which is used in duration string\n   * @returns {boolean}\n   */\n  validate(duration: string, locale: string = 'en'): boolean {\n    return Boolean(\n        duration.length > 0 && (duration.trim().match(/^\\d+$/) !== null || this.#timeGroups.extractTimeGroups(duration, locale).length)\n    );\n  }\n}\n\nexport default DurationValidator;"],"names":["TimeConverter","__privateAdd","_conversionMatrix","time","sourceUnit","targetUnit","conversion","factor","__privateGet","TimeIdentifiers","_identifiers","locale","newIdentifiers","identifier","usedIdentifiers","originalIdentifier","TimeGroups","timeIdentifiers","_timeIdentifiers","__privateSet","duration","stringRegex","regex","result","timeGroup","timeParts","parsedTime","timeGroups","groupSeparator","DurationParser","customTimeIdentifiers","_convertTimeGroup","_locale","_timeConverter","_timeGroups","input","totalTime","currentTimeGroup","__privateMethod","convertTimeGroup_fn","orderedInternalUnits","remainingTime","currentInternalUnit","convertedTime","timeUnit","timeToDiff","parsedGroup","DurationTranslator","sourceLocale","targetLocale","sourceDurationParser","targetDurationParser","parsedSource","DurationValidator"],"mappings":"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"}