{"version":3,"file":"index.js","mappings":"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","sources":["webpack://js-duration-parser/webpack/universalModuleDefinition","webpack://js-duration-parser/webpack/bootstrap","webpack://js-duration-parser/webpack/runtime/define property getters","webpack://js-duration-parser/webpack/runtime/hasOwnProperty shorthand","webpack://js-duration-parser/webpack/runtime/make namespace object","webpack://js-duration-parser/./src/TimeConverter.js","webpack://js-duration-parser/./src/TimeIdentifiers.js","webpack://js-duration-parser/./src/TimeGroups.js","webpack://js-duration-parser/./src/DurationParser.js","webpack://js-duration-parser/./src/DurationTranslator.js","webpack://js-duration-parser/./src/DurationValidator.js","webpack://js-duration-parser/./src/index.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"js-duration-parser\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"js-duration-parser\"] = factory();\n\telse\n\t\troot[\"js-duration-parser\"] = factory();\n})(global, () => {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/**\n * Allow time conversion between units\n */\nclass TimeConverter {\n  #convertionMatrix = {\n    's=>s': 1,\n    'm=>s': 60,\n    'h=>s': 60 * 60,\n    'd=>s': 24 * 60 * 60,\n    'w=>s': 7 * 24 * 60 * 60,\n    's=>m': 1 / 60,\n    'm=>m': 1,\n    'h=>m': 60,\n    'd=>m': 24 * 60,\n    'w=>m': 7 * 24 * 60,\n    's=>h': 1 / 60 / 60,\n    'm=>h': 1 / 60,\n    'h=>h': 1,\n    'd=>h': 24,\n    'w=>h': 7 * 24,\n    's=>d': 1 / 24 / 60 / 60,\n    'm=>d': 1 / 24 / 60,\n    'h=>d': 1 / 24,\n    'd=>d': 1,\n    'w=>d': 7,\n    's=>w': 1 / 7 / 24 / 60 / 60,\n    'm=>w': 1 / 7 / 24 / 60,\n    'h=>w': 1 / 7 / 24,\n    'd=>w': 1 / 7,\n    'w=>w': 1,\n  };\n\n  /**\n   * Convert time number expressed in source unit to number expressed in target unit; both units are basic one (en)\n   *\n   * @param {number} time Input time number\n   * @param {string} sourceUnit Source time unit\n   * @param {string} targetUnit Target time unit\n   * @returns {number}\n   */\n  convert(time, sourceUnit, targetUnit) {\n    const conversion = `${sourceUnit}=>${targetUnit}`;\n    const factor = this.#convertionMatrix[conversion] ?? null;\n    if (factor === null) {\n      throw new Error(`Conversion ${conversion} is not supported!`);\n    }\n    return time * factor;\n  }\n}\n\nexport default TimeConverter;","/**\n * Manage time identifiers used in duration string. This class allows to use time identifiers from many languages.\n */\nclass TimeIdentifiers {\n  #identifiers = {\n    en: {\n      s: 's',\n      m: 'm',\n      h: 'h',\n      d: 'd',\n      w: 'w',\n    },\n  };\n\n  /**\n   * Register new time identifiers for the given locale\n   *\n   * @param {string} locale Name of locale for which time identifiers are registered\n   * @param newIdentifiers New time identifiers\n   * @returns {TimeIdentifiers}\n   */\n  add(locale, newIdentifiers) {\n    this.#identifiers[locale] = newIdentifiers;\n    return this;\n  }\n\n  /**\n   * Return time identifiers for the given locale name; if not registered, return identifiers for 'en' locale\n   *\n   * @param {string} locale Locale name\n   * @returns {{s: string, d: string, w: string, h: string, m: string}}\n   */\n  get(locale) {\n    return this.#identifiers[locale] ?? this.#identifiers.en;\n  }\n\n  /**\n   * Return internal unit (en) for the time unit in the specified locale\n   *\n   * @param {string} identifier Localized time identifier\n   * @param {string} locale Locale name\n   * @returns {string|null}\n   */\n  getInternalUnit(identifier, locale) {\n    const usedIdentifiers = this.get(locale);\n    for (const originalIdentifier in usedIdentifiers) {\n      if (usedIdentifiers[originalIdentifier] === identifier) {\n        return originalIdentifier;\n      }\n    }\n    return null;\n  }\n}\n\nexport default TimeIdentifiers;","import TimeIdentifiers from \"./TimeIdentifiers\";\n\n/**\n * Manage time groups and make some operations on them.\n */\nclass TimeGroups {\n  #timeIdentifiers;\n\n  /* istanbul ignore next */\n  /**\n   * @param {TimeIdentifiers|null} timeIdentifiers\n   */\n  constructor(timeIdentifiers = null) {\n    this.#timeIdentifiers = timeIdentifiers ?? new TimeIdentifiers();\n  }\n\n  /**\n   * Extract array of time groups which are in duration string\n   *\n   * @param {string} duration Whole duration string\n   * @param {string} locale Locale name of time identifiers used in duration string\n   * @returns {string[]}\n   */\n  extractTimeGroups(duration, locale) {\n    const usedIdentifiers = this.#timeIdentifiers.get(locale);\n    const stringRegex = `^(\\\\d+${usedIdentifiers.w})?\\\\s*(\\\\d+${usedIdentifiers.d})?\\\\s*(\\\\d+${usedIdentifiers.h})?\\\\s*(\\\\d+${usedIdentifiers.m})?\\\\s*(\\\\d+${usedIdentifiers.s})?$`;\n    const regex = new RegExp(stringRegex);\n    const result = duration.trim().toLowerCase().match(regex);\n    if (result === null) {\n      return [];\n    }\n    return [...result].slice(1).filter(Boolean);\n  }\n\n  /**\n   * Parse single time group to object having information about both unit and number of it\n   *\n   * @param {string} timeGroup Single time group\n   * @param {string} locale Locale name of time unit used in time group\n   * @returns {{unit: *, time: number}|null}\n   */\n  parseTimeGroup(timeGroup, locale) {\n    const usedIdentifiers = this.#timeIdentifiers.get(locale);\n    const stringRegex = `^(\\\\d+)\\\\s*([${usedIdentifiers.w}${usedIdentifiers.d}${usedIdentifiers.h}${usedIdentifiers.m}${usedIdentifiers.s}])$`;\n    const regex = new RegExp(stringRegex);\n    const result = timeGroup.trim().toLowerCase().match(regex);\n    if (result === null) {\n      return null;\n    }\n    const timeParts = [...result].slice(1);\n    return {\n      time: parseInt(timeParts[0]),\n      unit: timeParts[1]\n    };\n  }\n\n  /**\n   * Build a single time group from object created while parsing a group\n   *\n   * @param {{unit: *, time: number}} parsedTime Object of parsed time group\n   * @returns {string}\n   */\n  buildTimeGroup(parsedTime) {\n    if (typeof parsedTime.time === 'undefined' || typeof parsedTime.unit === 'undefined') {\n      throw new Error('Wrong input object is passed');\n    }\n    return `${parsedTime.time}${parsedTime.unit.trim()}`\n  }\n\n  /**\n   * Compose the whole duration string from array of time groups; given separator is used to join all groups\n   *\n   * @param {string[]} timeGroups Array of time groups in the same locale as for output\n   * @param {string} groupSeparator Separator between every group in output duration string\n   * @returns {string}\n   */\n  composeDuration(timeGroups, groupSeparator = ' ') {\n    return timeGroups.join(groupSeparator);\n  }\n}\n\nexport default TimeGroups;","import TimeConverter from \"./TimeConverter\";\nimport TimeIdentifiers from \"./TimeIdentifiers\";\nimport TimeGroups from \"./TimeGroups\";\n\nclass DurationParser {\n  #locale;\n\n  #timeConverter;\n\n  #timeIdentifiers;\n\n  #timeGroups;\n\n  /**\n   * @param {string} locale Locale used for parsing duration\n   * @param {TimeIdentifiers|null} customTimeIdentifiers Custom TimeIdentifiers object with added localized identifiers\n   */\n  constructor(locale = 'en', customTimeIdentifiers = null) {\n    this.#locale = locale;\n    this.#timeConverter = new TimeConverter();\n    this.#timeIdentifiers = customTimeIdentifiers ?? new TimeIdentifiers();\n    this.#timeGroups = new TimeGroups(this.#timeIdentifiers);\n  }\n\n  /**\n   * Converts given time group into number in target unit\n   *\n   * @param {string} timeGroup Time group being a single parsed duration, eg. \"2w\", \"30m\", etc.\n   * @param {string} targetUnit Target time unit expressed in 'en' locale\n   * @returns {number}\n   */\n  #convertTimeGroup(timeGroup, targetUnit) {\n    const parsedGroup = this.#timeGroups.parseTimeGroup(timeGroup, this.#locale);\n    return this.#timeConverter.convert(\n      parsedGroup.time,\n      this.#timeIdentifiers.getInternalUnit(parsedGroup.unit, this.#locale),\n      targetUnit\n    );\n  }\n\n  /**\n   * Return duration length from input expressed in target units\n   *\n   * @param {string} input Input duration string expressed in human-like pattern\n   * @param targetUnit Identifier of target time unit\n   * @returns {number|null}\n   */\n  parse(input, targetUnit = 'm') {\n    if (!input) {\n      return null;\n    }\n    const timeGroups = this.#timeGroups.extractTimeGroups(input, this.#locale);\n    if (timeGroups.length === 0) {\n      return null;\n    }\n    return timeGroups.reduce(\n      (totalTime, currentTimeGroup) =>\n        totalTime + this.#convertTimeGroup(currentTimeGroup, targetUnit),\n      0,\n    );\n  }\n\n  /**\n   * Create duration string from time amount\n   *\n   * @param time input time amount expressed in source time unit\n   * @param sourceUnit Source time unit identifier\n   * @param groupSeparator Group separator used to join time groups in output duration string\n   * @returns {string|null}\n   */\n  compose(time, sourceUnit = 'm', groupSeparator = ' ') {\n    if (!time) {\n      return null;\n    }\n    const usedIdentifiers = this.#timeIdentifiers.get(this.#locale);\n    const orderedInternalUnits = ['w', 'd', 'h', 'm', 's'];\n\n    const timeGroups = [];\n    let remainingTime = time;\n    // eslint-disable-next-line no-restricted-syntax,guard-for-in\n    for (const currentInternalUnit of orderedInternalUnits) {\n      const convertedTime = parseInt(\n        this.#timeConverter.convert(remainingTime, sourceUnit, currentInternalUnit),\n      );\n      const timeUnit = usedIdentifiers[currentInternalUnit] ?? null;\n      if (convertedTime >= 1.0 && timeUnit !== null) {\n        timeGroups.push(this.#timeGroups.buildTimeGroup({time: convertedTime, unit: timeUnit}));\n        const timeToDiff = this.#timeConverter.convert(\n          convertedTime,\n          currentInternalUnit,\n          sourceUnit,\n        );\n        remainingTime -= timeToDiff;\n      }\n    }\n\n    return this.#timeGroups.composeDuration(timeGroups, groupSeparator);\n  }\n}\n\nexport default DurationParser;","import DurationParser from \"./DurationParser\";\nimport TimeIdentifiers from \"./TimeIdentifiers\";\n\nclass DurationTranslator {\n  #timeIdentifiers;\n\n  /* istanbul ignore next */\n  /**\n   * @param {TimeIdentifiers|null} timeIdentifiers\n   */\n  constructor(timeIdentifiers = new TimeIdentifiers()) {\n    this.#timeIdentifiers = timeIdentifiers;\n  }\n\n  /**\n   * Translate duration string from source to target locale\n   *\n   * @param duration Input duration string\n   * @param sourceLocale Source locale name\n   * @param targetLocale Target locale name\n   * @returns {string|null}\n   */\n  translate(duration, sourceLocale, targetLocale) {\n    const sourceDurationParser = new DurationParser(sourceLocale, this.#timeIdentifiers);\n    const targetDurationParser = new DurationParser(targetLocale, this.#timeIdentifiers);\n    const parsedSource = sourceDurationParser.parse(duration, 's');\n    return targetDurationParser.compose(parsedSource, 's');\n  }\n}\n\nexport default DurationTranslator;","import TimeGroups from \"./TimeGroups\";\nimport TimeIdentifiers from \"./TimeIdentifiers\";\n\n/**\n * Validate duration string without doing a conversion\n */\nclass DurationValidator {\n  #timeGroups;\n\n  /**\n   * @param {TimeIdentifiers|null} timeIdentifiers\n   */\n  constructor(timeIdentifiers = null) {\n    this.#timeGroups = new TimeGroups(timeIdentifiers ?? new TimeIdentifiers());\n  }\n\n  /**\n   *  Validate if duration string meets all syntactic requirements\n   *\n   * @param {string} duration Duration string expressed in human-like format\n   * @param {string} locale Locale name which is used in duration string\n   * @returns {boolean}\n   */\n  validate(duration, locale = 'en') {\n    return duration.length > 0 && this.#timeGroups.extractTimeGroups(duration, locale).length;\n  }\n}\n\nexport default DurationValidator;","import DurationParser from \"./DurationParser\";\nimport DurationTranslator from \"./DurationTranslator\";\nimport DurationValidator from \"./DurationValidator\";\nimport TimeIdentifiers from \"./TimeIdentifiers\";\n\nexport {\n  DurationTranslator,\n  DurationValidator,\n  TimeIdentifiers\n}\n\nexport default DurationParser;"],"names":["root","factory","exports","module","define","amd","global","__webpack_require__","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","convert","time","sourceUnit","targetUnit","conversion","factor","this","Error","en","s","m","h","d","w","add","locale","newIdentifiers","getInternalUnit","identifier","usedIdentifiers","originalIdentifier","constructor","timeIdentifiers","extractTimeGroups","duration","stringRegex","regex","RegExp","result","trim","toLowerCase","match","slice","filter","Boolean","parseTimeGroup","timeGroup","timeParts","parseInt","unit","buildTimeGroup","parsedTime","composeDuration","timeGroups","groupSeparator","join","customTimeIdentifiers","parsedGroup","parse","input","length","reduce","totalTime","currentTimeGroup","compose","orderedInternalUnits","remainingTime","currentInternalUnit","convertedTime","timeUnit","push","translate","sourceLocale","targetLocale","sourceDurationParser","targetDurationParser","parsedSource","validate"],"sourceRoot":""}